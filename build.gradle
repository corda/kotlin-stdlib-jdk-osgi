import java.util.jar.JarFile
import static java.util.stream.Collectors.joining

plugins {
    id 'com.jfrog.artifactory'
}

String getPackageNames(File file) {
    new JarFile(file).withCloseable { jar ->
        jar.stream()
           .filter { !it.directory }
           .map { it.name }
           .filter { !it.startsWith('META-INF/') }
           .map { it.substring(0, it.lastIndexOf('/')).replace('/', '.') }
           .distinct()
           .sorted()
           .collect(joining(','))
    }
}

subprojects { sub ->
    group 'net.corda.kotlin'
    version kotlin_version

    configurations {
        bundle {
            canBeConsumed = false
            transitive = false
        }
    }

    ext {
        kotlinProvider = provider {
            File file = configurations.bundle.singleFile
            String fileURI = file.toURI().toString()
            """\
-include: jar:$fileURI!/META-INF/MANIFEST.MF
-includeresource: @$fileURI
-exportcontents: ${getPackageNames(file)}
-fixupmessages "Classes found in the wrong directory"; restrict:=error; is:=warning
"""
        }
    }

    tasks.withType(Jar).configureEach {
        preserveFileTimestamps = false
        reproducibleFileOrder = true
    }

    tasks.withType(GenerateModuleMetadata).configureEach {
        enabled = false
    }

    pluginManager.withPlugin('maven-publish') {
        publishing {
            publications {
                create(sub.name, MavenPublication) {
                    pluginManager.withPlugin('java') {
                        from components.java

                        def jarTask = tasks.named('jar', Jar)
                        artifact tasks.register('sourcesJar', Jar) {
                            archiveBaseName = jarTask.flatMap { it.archiveBaseName }
                            archiveClassifier = 'sources'
                            from 'README.md'
                            include 'README.md'
                        }

                        artifact tasks.register('javadocJar', Jar) {
                            archiveBaseName = jarTask.flatMap { it.archiveBaseName }
                            archiveClassifier = 'javadoc'
                            from 'README.md'
                            include 'README.md'
                        }
                    }

                    pom {
                        afterEvaluate {
                            name = it.name
                            description = it.description
                        }
                        url = 'https://github.com/corda/kotlin-stdlib-jdk-osgi'

                        scm {
                            url = 'https://github.com/corda/kotlin-stdlib-jdk-osgi'
                        }

                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://github.com/JetBrains/kotlin/blob/master/license/LICENSE.txt'
                            distribution = 'repo'
                        }

                        developer {
                            name = 'Kotlin Team'
                            organization = 'JetBrains'
                            organizationUrl = 'https://www.jetbrains.com'
                        }
                    }
                }
            }
        }

        tasks.register('install') {
            group = 'publishing'
            dependsOn 'publishToMavenLocal'
        }

        pluginManager.withPlugin('com.jfrog.artifactory') {
            artifactoryPublish {
                publications(sub.name)
            }
        }
    }
}

artifactory {
    publish {
        contextUrl = artifactory_contextUrl
        repository {
            repoKey = 'corda-dependencies'
            username = project.findProperty('cordaArtifactoryUsername') ?: System.getenv('CORDA_ARTIFACTORY_USERNAME') ?: System.getProperty('corda.artifactory.username')
            password = project.findProperty('cordaArtifactoryPassword') ?: System.getenv('CORDA_ARTIFACTORY_APIKEY') ?: System.getProperty('corda.artifactory.password')
        }
    }
}

wrapper {
    gradleVersion = '7.2'
    distributionType = Wrapper.DistributionType.BIN
}
